[ 20, 44, 48, 55, 62, 66, 74, 88, 93, 99 ]at index positions 0 through 9. 
The question asks us to search for 90, and count the 44 by binary search.

Solution: binary search is an algorithm that can search an item less often(prerequiste: the list hase to be sorted.)

Step 1: We know this list has 10 items and  indexs, we need to find the mid point of this list by adding the first index and last index and divide the sum by 2. 
We can get the midpoint's index is 4.

Step 2: Create an while loop. We compare the target number with the mid point number, if they are the same number, exit the while loop.(90 != 62)

Step 3: If the target number is less than midpoint number, we discard the rightside of this list, and continue execute the Step 1.
        If the target number is greater than midpoint number, we discard the leftside of this list(90 > 62), and continue execute the Step 1.

Now the list only remaining[66, 74, 88, 93, 99]
Midpoint index is 2, is 88.
Compare target number with 88.(90 > 88)
The list contains[93, 99]
compare these two numbers with 90(93 != 90, 99 != 90)
So there is no 90 in this list.

Searching for 44 has the same procedueres. 
We can creat a variable equals 0 at first. When we find 44 binary search, we can add 1 to that variable.


Analysis: binary search is a better search method than linear search since it can ignore half of the list after one time executing. So the runing time is decreasing a lot.

There are 10 items in the list, after first search, only left 10/2 items.


The computational complexity is O(log n(base 2))(n is the number of itmes in the list)



